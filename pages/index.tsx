import type { GetServerSideProps, InferGetServerSidePropsType} from 'next'
import Head from 'next/head'
import {useRouter} from 'next/router'
import {getSession} from 'next-auth/react'
import {useRecoilState} from "recoil";
import {AnimatePresence} from 'framer-motion'

import {DashboardHeader, Feed, Modal, Sidebar, Widgets} from "@components";
import {modalState, modalTypeState} from "@atoms";
import {connectToDatabase} from "@lib";
import {PostType} from "@types";

export const getServerSideProps: GetServerSideProps = async (context) => {
    const session = await getSession(context)

    // if (!session) return {
    //     redirect: {
    //         permanent: false,
    //         destination: '/login'
    //     },
    //     notFound: true
    // }

    const {db} = await connectToDatabase()
    const posts = await db.collection('posts')
        .find().sort({timestamp: -1})
        .toArray()
        .then(posts => posts)
        .catch(error => console.error(error))

    const editedPosts: PostType[] = posts!.map(post => ({
        _id: post._id.toString(),
        username: post.username,
        email: post.email,
        photoUrl: post.photoUrl,
        userImg: post.userImg,
        createdAt: post.createdAt,
        timestamp: post.timestamp.toString(),
        input: post.input
    }))

    const results = await (await fetch(`https://newsapi.org/v2/top-headlines?category=business&country=us&apiKey=${process.env.NEWS_API_KEY}`)).json()

    return {
        props: {
            session,
            posts: editedPosts || null,
            articles: results.articles || null
        }
    }
}


const Home = ({posts, articles}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
    const [modalOpen, setModalOpen] = useRecoilState(modalState)
    const [modalType, setModalType] = useRecoilState(modalTypeState)

    const router = useRouter()
    // const {data, status} = useSession({
    //     required: true,
    //     onUnauthenticated: () => {
    //         router.push('/login')
    //     }
    // })

    return (
        <div className={'bg-[#f3f2ef] h-screen dark:bg-black dark:text-white space-y-6 overflow-y-scroll'}>
            <Head>
                <title>Feed | Linkedin</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <DashboardHeader/>

            <main>
                <div
                    className={'grid max-w-3xl md:max-w-3xl lg:max-w-5xl grid-cols-[minmax(300px,_512px)] sm:grid-cols-[1fr_3fr] lg:grid-cols-[1fr_minmax(470px,_5fr)_2fr] mx-auto gap-5 px-4 sm:px-12 justify-center'}>
                    {/*<div className={'flex grid-cols-1 sm:grid-cols-[1fr_3fr] md:grid-cols-[1fr_3fr_2fr] mx-auto gap-5 px-4 sm:px-12'}>*/}
                    {/*<div className={'border border-white rounded-full'}>one</div>*/}
                    <Sidebar/>
                    <Feed posts={posts}/>

                    <Widgets articles={articles}/>

                    <AnimatePresence>
                        {modalOpen && <Modal type={modalType} handleClose={() => setModalOpen(false)}/>}
                    </AnimatePresence>
                </div>
            </main>

        </div>
    )
}

export default Home
